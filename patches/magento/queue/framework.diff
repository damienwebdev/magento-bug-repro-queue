--- b/App/ObjectManagerFactory.php
+++ a/App/ObjectManagerFactory.php
@@ -231,6 +231,7 @@
                 'boolean' => new \Magento\Framework\Data\Argument\Interpreter\Boolean($booleanUtils),
                 'string' => new \Magento\Framework\Data\Argument\Interpreter\BaseStringUtils($booleanUtils),
                 'number' => new \Magento\Framework\Data\Argument\Interpreter\Number(),
+                'int' => new \Magento\Framework\Data\Argument\Interpreter\Integer(),
                 'null' => new \Magento\Framework\Data\Argument\Interpreter\NullType(),
                 'object' => new \Magento\Framework\Data\Argument\Interpreter\DataObject($booleanUtils),
                 'const' => $constInterpreter,
--- /dev/null
+++ a/Data/Argument/Interpreter/Integer.php
@@ -0,0 +1,28 @@
+<?php
+/**
+ * Copyright Â© Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+namespace Magento\Framework\Data\Argument\Interpreter;
+
+use Magento\Framework\Data\Argument\InterpreterInterface;
+
+/**
+ * Interpreter of numeric data, such as integer or float
+ */
+class Integer implements InterpreterInterface
+{
+    /**
+     * {@inheritdoc}
+     * @return int|float
+     * @throws \InvalidArgumentException
+     */
+    public function evaluate(array $data)
+    {
+        if (!isset($data['value']) || !is_numeric($data['value'])) {
+            throw new \InvalidArgumentException('Numeric value is expected.');
+        }
+        $result = $data['value'];
+        return (int)$result;
+    }
+}
--- b/Data/etc/argument/types.xsd
+++ a/Data/etc/argument/types.xsd
@@ -73,6 +73,12 @@
         </xs:complexContent>
     </xs:complexType>
 
+    <xs:complexType name="int">
+        <xs:complexContent>
+            <xs:extension base="argumentType"/>
+        </xs:complexContent>
+    </xs:complexType>
+
     <xs:complexType name="null">
         <xs:complexContent>
             <xs:restriction base="argumentType"/>
